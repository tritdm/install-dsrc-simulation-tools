%description:
Tests the expression evaluation class

Notes for MODE=sanitize:
- false positive stack overflow; rewriting to use initialize() instead of activity() makes it go away
- some of the "syntax error" cases leak memory (this is expected)

%includes:
#include <common/expression.h>
#include <common/exprnodes.h>

%global:
using namespace omnetpp::common;
using namespace omnetpp::common::expression;

class Variable : public ValueNode
{
  private:
    std::string varName;
  public:
    Variable(const char *name) {varName = name;}
    virtual ExprNode *dup() const override {return new Variable(varName.c_str());}
    virtual std::string getName() const override {return varName;}
    virtual void print(std::ostream& out, int spaciousness) const override { out << varName; }
    virtual ExprValue evaluate(Context *context) const override {return (double)(varName[1]-'0');}
};

class VariableTranslator : public Expression::BasicAstTranslator
{
  public:
    virtual ExprNode *createIdentNode(const char *varName, bool withIndex) override { return new Variable(varName); }
};

static void eval(const char *txt)
{
    try {
        EV << txt << " -> ";
        Expression expr;
        VariableTranslator variableTranslator;
        Expression::MultiAstTranslator multiTranslator({ &variableTranslator, Expression::getDefaultAstTranslator() });

        expr.parse(txt, &multiTranslator);
        //EV << expr.str() << " --> ";  // echo parsed form
        EV << expr.evaluate().str() << "\n";
    }
    catch (std::exception& e) {
        EV << "exception: " << e.what() << "\n";
    }
}

%activity:
// precedence
eval("3+2");
eval("3+2*5");
eval("(3+2)*5");

// variables, functions
eval("a1");
eval("a2");
eval("a3");
eval("aaa:bbb");
eval("a0:b");
eval("a0:");
eval("a0: a");
eval(":a2");
eval("a1+a2+a3");
eval("fabs(-3.14)");
eval("pow(2,8)");

// boolean
eval("true");
eval("false");
eval("false || true");
eval("false || false");
eval("false && true");
eval("true && true");
eval("1 < 3");
eval("1 < 3 ? \"lt\" : \"gt\"");

// string
eval("\"foo\"");
eval("\"foo\" + \"bar\"");

// quantities: OK
eval("2m");
eval("-2m");
eval("1q+2q");
eval("1s+2ms");
eval("-1s+2ms");
eval("1q-2q");
eval("1s-2ms");
eval("-1s-2ms");
eval("3*5s");
eval("-3*5s");
eval("5s*3");
eval("-5s*3");
eval("1s/2");
eval("1s/2s");
eval("1s/2ms");

// quantities: errors
eval("1+2m");
eval("1m+2");
eval("1m+2s");
eval("1-2m");
eval("1m-2");
eval("1m-2s");
eval("1s*2s");
eval("1s/2m");
eval("1s^2");
eval("1s^2s");
eval("1^2s");

//TODO many more tests needed, for all operators, precedence rules, BOOL/INT/STRING type, overflow, functions, =~ operator, etc

EV << ".\n";

%exitcode: 0

%subst: /exception: syntax error.*/exception: syntax error/

%contains: stdout
3+2 -> 5
3+2*5 -> 13
(3+2)*5 -> 25
a1 -> 1
a2 -> 2
a3 -> 3
aaa:bbb -> 49
a0:b -> 0
a0: -> exception: syntax error
a0: a -> exception: syntax error
:a2 -> exception: syntax error
a1+a2+a3 -> 6
fabs(-3.14) -> 3.14
pow(2,8) -> 256
true -> true
false -> false
false || true -> true
false || false -> false
false && true -> false
true && true -> true
1 < 3 -> true
1 < 3 ? "lt" : "gt" -> "lt"
"foo" -> "foo"
"foo" + "bar" -> "foobar"
2m -> 2m
-2m -> -2m
1q+2q -> 3q
1s+2ms -> 1002ms
-1s+2ms -> -998ms
1q-2q -> -1q
1s-2ms -> 998ms
-1s-2ms -> -1002ms
3*5s -> 15s
-3*5s -> -15s
5s*3 -> 15s
-5s*3 -> -15s
1s/2 -> 0.5s
1s/2s -> 0.5
1s/2ms -> 500
1+2m -> exception: operator '+': Cannot convert unit 'm' (meter) to none
1m+2 -> exception: operator '+': Cannot convert unit none to 'm' (meter)
1m+2s -> exception: operator '+': Cannot convert unit 's' (second) to 'm' (meter)
1-2m -> exception: operator '-': Cannot convert unit 'm' (meter) to none
1m-2 -> exception: operator '-': Cannot convert unit none to 'm' (meter)
1m-2s -> exception: operator '-': Cannot convert unit 's' (second) to 'm' (meter)
1s*2s -> exception: operator '*': Multiplying two quantities with units is not supported
1s/2m -> exception: operator '/': Cannot convert unit 'm' (meter) to 's' (second)
1s^2 -> exception: operator '^': Dimensionless arguments expected, got 1s and 2
1s^2s -> exception: operator '^': Dimensionless arguments expected, got 1s and 2s
1^2s -> exception: operator '^': Dimensionless arguments expected, got 1 and 2s
.

