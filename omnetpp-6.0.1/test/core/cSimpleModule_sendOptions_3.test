%description:
Test cSimpleModule.sendDirect() with SendOptions.

%file: test.ned

simple Sender
{
}

simple Receiver
{
    gates:
        input in @directIn;
}

network Test
{
    submodules:
        sender : Sender;
        receiver : Receiver;
}

%inifile: test.ini
[General]
network = Test
cmdenv-express-mode = false
cmdenv-event-banners = false

%file: test.cc

#include <omnetpp.h>

using namespace omnetpp;

namespace @TESTNAME@ {

class Sender : public cSimpleModule
{
  private:
    cGate *receiverInputGate = nullptr;
    long transmissionId = 0;
  public:
    Sender() : cSimpleModule(32768) { }
    virtual void initialize() override { receiverInputGate = getModuleByPath("^.receiver")->gate("in"); }
    virtual void activity() override;

    // utilities
    void setDeliverImmediately(bool b);
    void setReceiverTxUpdateSupport(bool b);
    void waitUntil(simtime_t t) {wait(t-simTime());}
    void waitCeil() {waitUntil(simTime().trunc(SIMTIME_S)+1.0);}
    void sendOrigPkt(cPacket *pkt, const SendOptions& options) { trySend(pkt, SendOptions(options).transmissionId(transmissionId=pkt->getId())); }
    void trySend(cMessage *msg, const SendOptions& options);

    // tests
    void testDelays();
    void testDuration();
    void testTxUpdates();
};

Define_Module(Sender);

static cPacket *makePacket(int64_t bits)
{
    return new cPacket(nullptr, 0, bits);
}

void Sender::setDeliverImmediately(bool b)
{
    EV << "setting deliverImmediately=" << (b ? "true" : "false") << endl;
    receiverInputGate->setDeliverImmediately(b);
}

void Sender::setReceiverTxUpdateSupport(bool b)
{
    EV << "setting txUpdateSupport=" << (b ? "true" : "false") << endl;
    cSimpleModule *peer = check_and_cast<cSimpleModule*>(receiverInputGate->getOwnerModule());
    peer->setTxUpdateSupport(b);
}

void Sender::trySend(cMessage *msg, const SendOptions& options)
{
    try {
        EV << "at t=" << simTime().ustr() << " send ";
        if (!msg->isPacket())
            EV << "message";
        else
            EV << "packet(len=" << ((cPacket*)msg)->getBitLength() << ")";
        EV << " with " << options.str() << " --> ";

        sendDirect(msg, options, receiverInputGate);

        EV << "ok";
        if (msg->isPacket()) {
            cPacket *pkt = (cPacket *)msg;
            if (pkt->isUpdate())
                EV << ", update with remainingDuration=" << pkt->getRemainingDuration().ustr();
            EV << ", duration=" << pkt->getDuration().ustr();
        }
        EV << ", arrival=" << msg->getArrivalTime().ustr();
        EV << endl;
    }
    catch (const cRuntimeError& e) {
        EV << "ERROR: " << e.getFormattedMessage() << endl;
        delete msg;
    }
}

void Sender::testDelays()
{
    EV << "\nMESSAGES:\n";
    trySend(new cMessage(), SendOptions::DEFAULT);
    trySend(new cMessage(), SendOptions().after(0.2));
    trySend(new cMessage(), SendOptions().propagationDelay(0.1));
    trySend(new cMessage(), SendOptions().after(0.2).propagationDelay(0.1));
    trySend(makePacket(1000), SendOptions::DEFAULT);
    trySend(makePacket(1000), SendOptions().after(0.2));
    trySend(makePacket(1000), SendOptions().propagationDelay(0.1));
    trySend(makePacket(1000), SendOptions().after(0.2).propagationDelay(0.1));
    trySend(makePacket(1000), SendOptions().duration(0.5));
    trySend(makePacket(1000), SendOptions().duration(0.5).after(0.2));
    trySend(makePacket(1000), SendOptions().duration(0.5).propagationDelay(0.1));
    trySend(makePacket(1000), SendOptions().duration(0.5).after(0.2).propagationDelay(0.1));
}

void Sender::testDuration()
{
    EV << "\nDURATION:\n";
    trySend(new cMessage(), SendOptions().duration(0)); // error
    trySend(new cMessage(), SendOptions().duration(0.1)); // error
    trySend(new cMessage(), SendOptions().updateTx(99)); // error
    waitCeil(); trySend(makePacket(1000), SendOptions::DEFAULT); // ok
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0));
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0.3));
}

void Sender::testTxUpdates()
{
    EV << "\nTX UPDATE:\n";
    setDeliverImmediately(true);
    setReceiverTxUpdateSupport(true);
    // note: sendDirect() doesn't keep any state, so it's not possible to check
    // whether duration/remaningDuration are consistent with original transmission
    waitCeil(); sendOrigPkt(makePacket(1000), SendOptions().duration(0.1)); // original transmission
    wait(0.05); trySend(makePacket(1000), SendOptions().updateTx(transmissionId));
    wait(0.01); trySend(makePacket(1000), SendOptions().updateTx(transmissionId, 0.14)); // error (duration missing)
    wait(0.01); trySend(makePacket(1000), SendOptions().updateTx(transmissionId, 0.14).duration(0.2));
    wait(0.01); trySend(makePacket(1000), SendOptions().finishTx(transmissionId)); // error (duration missing)
    wait(0.01); trySend(makePacket(1000), SendOptions().finishTx(transmissionId).duration(0.9));

    EV << ".\n";
}

void Sender::activity()
{
    waitUntil(100); testDelays();
    waitUntil(200); testDuration();
    waitUntil(400); testTxUpdates();
}

class Receiver : public cSimpleModule
{
  public:
    Receiver() { }
    virtual void handleMessage(cMessage *msg) override {delete msg;}
};

Define_Module(Receiver);

}; //namespace

%contains: stdout
MESSAGES:
at t=100s send message with default --> ok, arrival=100s
at t=100s send message with sendDelay=200ms --> ok, arrival=100.2s
at t=100s send message with propagationDelay=100ms --> ok, arrival=100.1s
at t=100s send message with sendDelay=200ms propagationDelay=100ms --> ok, arrival=100.3s
at t=100s send packet(len=1000) with default --> ok, duration=0s, arrival=100s
at t=100s send packet(len=1000) with sendDelay=200ms --> ok, duration=0s, arrival=100.2s
at t=100s send packet(len=1000) with propagationDelay=100ms --> ok, duration=0s, arrival=100.1s
at t=100s send packet(len=1000) with sendDelay=200ms propagationDelay=100ms --> ok, duration=0s, arrival=100.3s
at t=100s send packet(len=1000) with duration=500ms --> ok, duration=500ms, arrival=100.5s
at t=100s send packet(len=1000) with sendDelay=200ms duration=500ms --> ok, duration=500ms, arrival=100.7s
at t=100s send packet(len=1000) with propagationDelay=100ms duration=500ms --> ok, duration=500ms, arrival=100.6s
at t=100s send packet(len=1000) with sendDelay=200ms propagationDelay=100ms duration=500ms --> ok, duration=500ms, arrival=100.8s

DURATION:
at t=200s send message with duration=0s --> ERROR: sendDirect(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_3::Sender) Test.sender (id=2), at t=200s, event #15
at t=200s send message with duration=100ms --> ERROR: sendDirect(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_3::Sender) Test.sender (id=2), at t=200s, event #15
at t=200s send message with isUpdate transmissionId=99 --> ERROR: sendDirect(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_3::Sender) Test.sender (id=2), at t=200s, event #15
at t=201s send packet(len=1000) with default --> ok, duration=0s, arrival=201s
at t=202s send packet(len=1000) with duration=0s --> ok, duration=0s, arrival=202s
at t=203s send packet(len=1000) with duration=300ms --> ok, duration=300ms, arrival=203.3s

TX UPDATE:
setting deliverImmediately=true
setting txUpdateSupport=true
at t=401s send packet(len=1000) with duration=100ms transmissionId=19 --> ok, duration=100ms, arrival=401s
at t=401.05s send packet(len=1000) with isUpdate transmissionId=19 --> ok, update with remainingDuration=0s, duration=0s, arrival=401.05s
at t=401.06s send packet(len=1000) with isUpdate transmissionId=19 remainingDuration=140ms --> ERROR: sendDirect(): For transmission update packets, the duration and remainingDuration options may only occur together -- in module (cSimpleModule_sendOptions_3::Sender) Test.sender (id=2), at t=401.06s, event #27
at t=401.07s send packet(len=1000) with duration=200ms isUpdate transmissionId=19 remainingDuration=140ms --> ok, update with remainingDuration=140ms, duration=200ms, arrival=401.07s
at t=401.08s send packet(len=1000) with isUpdate transmissionId=19 remainingDuration=0s --> ERROR: sendDirect(): For transmission update packets, the duration and remainingDuration options may only occur together -- in module (cSimpleModule_sendOptions_3::Sender) Test.sender (id=2), at t=401.08s, event #30
at t=401.09s send packet(len=1000) with duration=900ms isUpdate transmissionId=19 remainingDuration=0s --> ok, update with remainingDuration=0s, duration=900ms, arrival=401.09s
.
