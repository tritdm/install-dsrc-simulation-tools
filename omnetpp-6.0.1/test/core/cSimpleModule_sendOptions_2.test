%description:
Test cSimpleModule.send() with SendOptions and DatarateChannel,
with special attention to transmission updates.

%file: test.ned

simple Sender
{
    gates:
        output out;
}

simple Receiver
{
    gates:
        input in;
}

network Test
{
    submodules:
        sender : Sender;
        receiver : Receiver;
    connections:
        sender.out --> ned.DatarateChannel {delay=0.1s;}--> receiver.in;
}

%inifile: test.ini
[General]
network = Test
cmdenv-express-mode = false
cmdenv-event-banners = false

%file: test.cc

#include <omnetpp.h>

using namespace omnetpp;

namespace @TESTNAME@ {

class Sender : public cSimpleModule
{
  private:
    cDatarateChannel *datarateChannel;
    long transmissionId = 0;
  public:
    Sender() : cSimpleModule(32768) { }
    virtual void initialize() override { datarateChannel = check_and_cast<cDatarateChannel*>(gate("out")->getChannel()); }
    virtual void activity() override;

    // utilities
    void setDatarate(double d);
    void setChannelDisabled(bool b);
    void setDeliverImmediately(bool b);
    void setReceiverTxUpdateSupport(bool b);
    void waitUntil(simtime_t t) {wait(t-simTime());}
    void waitCeil() {waitUntil(simTime().trunc(SIMTIME_S)+1.0);}
    void sendOrigPkt(cPacket *pkt, const SendOptions& options) { trySend(pkt, SendOptions(options).transmissionId(transmissionId=pkt->getId())); }
    void trySend(cMessage *msg, const SendOptions& options);

    // tests
    void testMessages();
    void testDuration();
    void testBusyChannel();
    void testTxUpdates();
};

Define_Module(Sender);

static cPacket *makePacket(int64_t bits)
{
    return new cPacket(nullptr, 0, bits);
}

void Sender::setDatarate(double d)
{
    EV << "setting channel datarate=" << d << endl;
    datarateChannel->setDatarate(d);
}

void Sender::setChannelDisabled(bool b)
{
    EV << "setting channel disabled=" << (b ? "true" : "false") << endl;
    datarateChannel->setDisabled(b);
}

void Sender::setDeliverImmediately(bool b)
{
    EV << "setting deliverImmediately=" << (b ? "true" : "false") << endl;
    gate("out")->getPathEndGate()->setDeliverImmediately(b);
}

void Sender::setReceiverTxUpdateSupport(bool b)
{
    EV << "setting txUpdateSupport=" << (b ? "true" : "false") << endl;
    cSimpleModule *peer = check_and_cast<cSimpleModule*>(gate("out")->getPathEndGate()->getOwnerModule());
    peer->setTxUpdateSupport(b);
}

void Sender::trySend(cMessage *msg, const SendOptions& options)
{
    try {
        EV << "at t=" << simTime().ustr() << " send ";
        if (!msg->isPacket())
            EV << "message";
        else
            EV << "packet(len=" << ((cPacket*)msg)->getBitLength() << ")";
        EV << " with " << options.str() << " --> ";

        send(msg, options, "out");

        EV << "ok";
        if (msg->isPacket()) {
            cPacket *pkt = (cPacket *)msg;
            if (pkt->isUpdate())
                EV << ", update with remainingDuration=" << pkt->getRemainingDuration().ustr();
            EV << ", duration=" << pkt->getDuration().ustr();
        }
        EV << ", arrival=" << msg->getArrivalTime().ustr();
        EV << "; channel " << (datarateChannel->isBusy() ? "busy" : "idle");
        if (datarateChannel->isBusy())
            EV << " until t=" << datarateChannel->getTransmissionFinishTime().ustr();
        EV << endl;
    }
    catch (const cRuntimeError& e) {
        EV << "ERROR: " << e.getFormattedMessage() << endl;
        delete msg;
    }
}

void Sender::testMessages()
{
    EV << "\nMESSAGES:\n";
    setDatarate(1e6);
    trySend(new cMessage(), SendOptions::DEFAULT);
    trySend(new cMessage(), SendOptions().after(0.2));
    trySend(new cMessage(), SendOptions().propagationDelay(0.1));
    trySend(new cMessage(), SendOptions().duration(0)); // error
    trySend(new cMessage(), SendOptions().duration(0.1)); // error
    trySend(new cMessage(), SendOptions().updateTx(99)); // error

    trySend(makePacket(1000), SendOptions().duration(0.5)); // reserve channel
    wait(0.25); trySend(new cMessage(), SendOptions::DEFAULT); // during tx: still ok
}

void Sender::testDuration()
{
    EV << "\nDURATION: implicit, explicit:\n";
    setDatarate(0); // =none
    waitCeil(); trySend(makePacket(1000), SendOptions::DEFAULT); // error
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0));
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0.1));
    setDatarate(1e6); // 1Mbps
    waitCeil(); trySend(makePacket(1000), SendOptions::DEFAULT);
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0)); // override channel
    waitCeil(); trySend(makePacket(1000), SendOptions().duration(0.3)); // override channel
}

void Sender::testBusyChannel()
{
    EV << "\nBUSY CHANNEL:\n";
    setDatarate(1e6); // 1Mbps
    waitCeil();
    trySend(makePacket(1000), SendOptions().duration(0.5)); // reserve channel
    trySend(makePacket(1000), SendOptions::DEFAULT); // error: channel busy
    wait(0.1);
    trySend(makePacket(1000), SendOptions::DEFAULT); // error: channel busy
    waitUntil(datarateChannel->getTransmissionFinishTime());
    trySend(makePacket(1000), SendOptions::DEFAULT); // ok: exactly at end of previous transmission
}

void Sender::testTxUpdates()
{
    EV << "\nTX UPDATE: invalid transmissionId:\n";
    setDatarate(1e6);
    waitCeil(); trySend(makePacket(1000), SendOptions().updateTx(99));
    //TODO test error: receiver does not support updates

    EV << "\nTX UPDATE: with no datarate\n";
    setDatarate(0); // none
    setDeliverImmediately(true);
    setReceiverTxUpdateSupport(true);
    waitCeil(); sendOrigPkt(makePacket(1000), SendOptions().duration(0.1)); // original transmission
    wait(0.05); trySend(makePacket(1000), SendOptions().duration(0.1).updateTx(transmissionId)); // same duration, so endTx should not change
    wait(0.01); trySend(makePacket(1000), SendOptions().updateTx(transmissionId, 0.02)); // duration should be 50ms+10ms+20ms = 80ms
    wait(0.01); trySend(makePacket(1000), SendOptions().finishTx(transmissionId)); // should finish now (duration=70ms)
    waitUntil(datarateChannel->getTransmissionFinishTime()+0.001);
    trySend(makePacket(1000), SendOptions().finishTx(transmissionId)); // too late

    EV << "\nTX UPDATE: with datarate\n";
    setDatarate(1e4); // make pkt 0.1s long
    setDeliverImmediately(true);
    setReceiverTxUpdateSupport(true);
    waitCeil(); sendOrigPkt(makePacket(1000), SendOptions::DEFAULT); // original transmission
    wait(0.05); trySend(makePacket(1000), SendOptions().updateTx(transmissionId)); // same length, so endTx should not change
    wait(0.01); trySend(makePacket(2000), SendOptions().updateTx(transmissionId)); // extend packet a little
    wait(0.01); trySend(makePacket(1000), SendOptions().updateTx(transmissionId, 0.1)); // extend more
    wait(0.01); trySend(makePacket(1000), SendOptions().finishTx(transmissionId)); // finish

    EV << "\nTX UPDATE: disabling the channel mid-transmission\n";
    setDatarate(0); // none
    setDeliverImmediately(true);
    setReceiverTxUpdateSupport(true);
    waitCeil();
    sendOrigPkt(makePacket(1000), SendOptions().duration(0.1)); // original transmission
    wait(0.05);
    setChannelDisabled(true); // disable channel
    trySend(makePacket(500), SendOptions().finishTx(transmissionId)); // send packet truncation update
    EV << ".\n";
}

void Sender::activity()
{
    waitUntil(100); testMessages();
    waitUntil(200); testDuration();
    waitUntil(300); testBusyChannel();
    waitUntil(400); testTxUpdates();
}

class Receiver : public cSimpleModule
{
  public:
    Receiver() { }
    virtual void handleMessage(cMessage *msg) override {delete msg;}
};

Define_Module(Receiver);

}; //namespace

%contains: stdout
MESSAGES:
setting channel datarate=1e+06
at t=100s send message with default --> ok, arrival=100.1s; channel idle
at t=100s send message with sendDelay=200ms --> ok, arrival=100.3s; channel idle
at t=100s send message with propagationDelay=100ms --> ERROR: send()/sendDelayed(): Specifying a propagation delay in the options is only allowed for sendDirect() -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=100s, event #2
at t=100s send message with duration=0s --> ERROR: send(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=100s, event #2
at t=100s send message with duration=100ms --> ERROR: send(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=100s, event #2
at t=100s send message with isUpdate transmissionId=99 --> ERROR: send(): (omnetpp::cMessage) is a message, and the duration, remainingDuration, isUpdate and transmissionId send options are only allowed on packets -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=100s, event #2
at t=100s send packet(len=1000) with duration=500ms --> ok, duration=500ms, arrival=100.6s; channel busy until t=100.5s
at t=100.25s send message with default --> ok, arrival=100.35s; channel busy until t=100.5s

DURATION: implicit, explicit:
setting channel datarate=0
at t=201s send packet(len=1000) with default --> ERROR: (omnetpp::cDatarateChannel)Test.sender.out.channel: Cannot send packet (omnetpp::cPacket): Unknown duration: No channel datarate, and no explicit duration supplied in the send call -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=201s, event #9
at t=202s send packet(len=1000) with duration=0s --> ok, duration=0s, arrival=202.1s; channel idle
at t=203s send packet(len=1000) with duration=100ms --> ok, duration=100ms, arrival=203.2s; channel busy until t=203.1s
setting channel datarate=1e+06
at t=204s send packet(len=1000) with default --> ok, duration=1ms, arrival=204.101s; channel busy until t=204.001s
at t=205s send packet(len=1000) with duration=0s --> ok, duration=0s, arrival=205.1s; channel idle
at t=206s send packet(len=1000) with duration=300ms --> ok, duration=300ms, arrival=206.4s; channel busy until t=206.3s

BUSY CHANNEL:
setting channel datarate=1e+06
at t=301s send packet(len=1000) with duration=500ms --> ok, duration=500ms, arrival=301.6s; channel busy until t=301.5s
at t=301s send packet(len=1000) with default --> ERROR: Cannot send packet (omnetpp::cPacket): Channel is currently busy with an ongoing transmission -- please rewrite the sender module to only send when the previous transmission has already finished, using cGate::getTransmissionFinishTime(), scheduleAt(), and possibly a cPacketQueue for storing packets waiting to be transmitted -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=301s, event #21
at t=301.1s send packet(len=1000) with default --> ERROR: Cannot send packet (omnetpp::cPacket): Channel is currently busy with an ongoing transmission -- please rewrite the sender module to only send when the previous transmission has already finished, using cGate::getTransmissionFinishTime(), scheduleAt(), and possibly a cPacketQueue for storing packets waiting to be transmitted -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=301.1s, event #22
at t=301.5s send packet(len=1000) with default --> ok, duration=1ms, arrival=301.601s; channel busy until t=301.501s

TX UPDATE: invalid transmissionId:
setting channel datarate=1e+06
at t=401s send packet(len=1000) with isUpdate transmissionId=99 --> ERROR: Cannot send transmission update packet (omnetpp::cPacket): transmissionId=99 does not match that of the last transmission on the channel -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=401s, event #27

TX UPDATE: with no datarate
setting channel datarate=0
setting deliverImmediately=true
setting txUpdateSupport=true
at t=402s send packet(len=1000) with duration=100ms transmissionId=20 --> ok, duration=100ms, arrival=402.1s; channel busy until t=402.1s
at t=402.05s send packet(len=1000) with duration=100ms isUpdate transmissionId=20 --> ok, update with remainingDuration=50ms, duration=100ms, arrival=402.15s; channel busy until t=402.1s
at t=402.06s send packet(len=1000) with isUpdate transmissionId=20 remainingDuration=20ms --> ok, update with remainingDuration=20ms, duration=80ms, arrival=402.16s; channel busy until t=402.08s
at t=402.07s send packet(len=1000) with isUpdate transmissionId=20 remainingDuration=0s --> ok, update with remainingDuration=0s, duration=70ms, arrival=402.17s; channel idle
at t=402.071s send packet(len=1000) with isUpdate transmissionId=20 remainingDuration=0s --> ERROR: Cannot send transmission update packet (omnetpp::cPacket): It has missed the end of the transmission to be updated -- in module (cSimpleModule_sendOptions_2::Sender) Test.sender (id=2), at t=402.071s, event #32

TX UPDATE: with datarate
setting channel datarate=10000
setting deliverImmediately=true
setting txUpdateSupport=true
at t=403s send packet(len=1000) with transmissionId=25 --> ok, duration=100ms, arrival=403.1s; channel busy until t=403.1s
at t=403.05s send packet(len=1000) with isUpdate transmissionId=25 --> ok, update with remainingDuration=50ms, duration=100ms, arrival=403.15s; channel busy until t=403.1s
at t=403.06s send packet(len=2000) with isUpdate transmissionId=25 --> ok, update with remainingDuration=140ms, duration=200ms, arrival=403.16s; channel busy until t=403.2s
at t=403.07s send packet(len=1000) with isUpdate transmissionId=25 remainingDuration=100ms --> ok, update with remainingDuration=100ms, duration=170ms, arrival=403.17s; channel busy until t=403.17s
at t=403.08s send packet(len=1000) with isUpdate transmissionId=25 remainingDuration=0s --> ok, update with remainingDuration=0s, duration=80ms, arrival=403.18s; channel idle

TX UPDATE: disabling the channel mid-transmission
setting channel datarate=0
setting deliverImmediately=true
setting txUpdateSupport=true
at t=404s send packet(len=1000) with duration=100ms transmissionId=30 --> ok, duration=100ms, arrival=404.1s; channel busy until t=404.1s
setting channel disabled=true
at t=404.05s send packet(len=500) with isUpdate transmissionId=30 remainingDuration=0s --> ok, update with remainingDuration=0s, duration=50ms, arrival=404.15s; channel idle
.

