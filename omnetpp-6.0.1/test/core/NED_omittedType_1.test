%description:
Tests @omittedTypename.

%file: interfaces/misc.ned
package interfaces;

moduleinterface IFoo { @omittedTypename(OmittedFoo); }
moduleinterface IBar { @omittedTypename(); }
moduleinterface IBaz { }

channelinterface IFooCh { @omittedTypename(OmittedFooCh); }
channelinterface IBarCh { @omittedTypename(); }
channelinterface IBazCh { }

%file: impl/misc.ned
package impl;
import interfaces.*;

module OmittedFoo like IFoo {}
module OmittedBar like IBar {}

channel OmittedFooCh extends ned.IdealChannel like IFooCh {}
channel OmittedBarCh extends ned.IdealChannel like IBarCh {}

%file: test.ned
import interfaces.*;
import testlib.Dump;

module Node { gates: input in[]; output out[]; connections allowunconnected: }

network Test
{
    parameters:
        *.typename = "";
        *.out[*].channel.typename = "";

    submodules:
        foo: <> like IFoo; // -> OmittedFoo
        bar: <> like IBar; // -> missing
        foo2: <> like IFoo {@omittedTypename(-);}; // -> missing
        bar2: <> like IBar {@omittedTypename(OmittedBar);}; // -> OmittedBar
        a: Node;
        b: Node;
        dump: Dump;

    connections allowunconnected:
        a.out++ --> <> like IFooCh --> b.in++;
        a.out++ --> <> like IBarCh --> b.in++;
        a.out++ --> <> like IFooCh {@omittedTypename(-);} --> b.in++;
        a.out++ --> <> like IBarCh {@omittedTypename(OmittedBarCh);} --> b.in++;
}

%contains: stdout
module Test: Test {
    parameters:
        @isNetwork
    submodules:
        module Test.foo: impl.OmittedFoo {
        }
        module Test.bar2: impl.OmittedBar {
            parameters:
                @omittedTypename(OmittedBar)
        }
        module Test.a: Node {
            gates:
                out[0]: --> b.in[0], (impl.OmittedFooCh)channel
                out[1]: --> b.in[1]
                out[2]: --> b.in[2]
                out[3]: --> b.in[3], (impl.OmittedBarCh)channel
        }
        module Test.b: Node {
            gates:
                in[0]: <-- a.out[0], (impl.OmittedFooCh)channel
                in[1]: <-- a.out[1]
                in[2]: <-- a.out[2]
                in[3]: <-- a.out[3], (impl.OmittedBarCh)channel
        }
}
