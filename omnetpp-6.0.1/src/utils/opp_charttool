#!/usr/bin/env python3

"""
This script can load .anf files and execute the chart scripts in them, independent of the IDE.
"""

import os
import re
import sys
import glob
import argparse
from argparse import RawTextHelpFormatter
import traceback
import subprocess
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
from omnetpp.scave.analysis import *
from omnetpp.scave.charttemplate import *
from omnetpp.scave.impl import results_standalone as results, chart_charttool as chart


def error(message):
    print("ERROR: " + message)
    sys.exit(1)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=
        "For processing OMNeT++ Analysis files (*.anf) on the command line. opp_charttool can list the "
        "contents of anf files, and run the chart scripts for display or image/data export. "
        "Native charts are 'emulated' using Matplotlib.",
        epilog="Some commands accept additional arguments. For more info, run opp_charttool COMMAND -h",
        formatter_class=RawTextHelpFormatter)

    subparsers = parser.add_subparsers(help='', dest='command', metavar='COMMAND')

    root_parser = argparse.ArgumentParser()
    common_parser = subparsers.add_parser(None, parents=[root_parser], add_help=False)
    common_parser.add_argument('-i', metavar='indices', type=str, nargs=1, help='Selects charts with the given indices, example: 1,3,6-10 (see "info" command; conflicts with -n)')
    common_parser.add_argument('-n', metavar='substring', type=str, nargs=1, help='Select charts that have the given substring in their names/paths (conflicts with -i)')
    common_parser.add_argument('-p', metavar='project_path', type=str, nargs='*', default=[], help='Adds a workspace path to filesystem directory mapping (format: "/project=.")')
    common_parser.add_argument('-w', metavar='workspace_directory', type=str, nargs=1, default=[None], help='The workspace directory. Acts as a fallback after -p. The input patterns are relative to this')
    common_parser.add_argument('-D', metavar='properties', dest='properties', type=str, nargs='*', default=[], help='Extra properties to pass to the chart script, format: key=value')
    common_parser.add_argument('-v', dest="verbose", default=False, action='store_true', help='Verbose operation')
    common_parser.add_argument('anf_file', type=str, nargs=1, default="", help='The Analysis (.anf) file')

    info_parser = subparsers.add_parser('info', help='(default) Info about the analysis file', parents=[common_parser], add_help=False)

    run_parser = subparsers.add_parser('run', help='Run a selected chart', parents=[common_parser], add_help=False)
    run_parser.add_argument('--no-show', dest="show", default=True, action='store_false', help='Do not call plt.show() after running')

    imageexport_parser = subparsers.add_parser('imageexport', help='Export selected or all charts as image(s)', parents=[common_parser], add_help=False)
    imageexport_parser.add_argument('-f', metavar='format', dest='format', type=str, default='svg', help='The image format to export in')
    imageexport_parser.add_argument('-d', metavar='folder', dest='target_folder', type=str, default=None, help='The folder to export into')
    imageexport_parser.add_argument('-o', metavar='filename', dest='out_file', type=str, default=None, help='The filename to export as')

    imageexport_parser.add_argument('--width', metavar='width', type=float, default=None, help='The width of the image in inches')
    imageexport_parser.add_argument('--height', metavar='height', type=float, default=None, help='The height of the image in inches')
    imageexport_parser.add_argument('--dpi', metavar='dpi', type=int, default=None, help='The resolution of the image in dots per inch')

    dataexport_parser = subparsers.add_parser('dataexport', help='Export data of selected or all charts', parents=[common_parser], add_help=False)
    dataexport_parser.add_argument('-f', metavar='format', dest='format', type=str, default='csv', help='The data format to export in')
    dataexport_parser.add_argument('-d', metavar='folder', dest='target_folder', type=str, default=None, help='The folder to export into')
    dataexport_parser.add_argument('-o', metavar='filename', dest='out_file', type=str, default=None, help='The filename to export as')

    templates_parser = subparsers.add_parser('templates', help='List available chart templates', parents=[root_parser], add_help=False)
    templates_parser.add_argument('-v', dest="verbose", default=False, action='store_true', help='Verbose operation')
    templates_parser.add_argument('-I', metavar='templates_path', dest='templates_path', type=str, default=None, help='Colon-separated list of directories where chart templates are to be loaded from')
    templates_parser.add_argument('--properties', dest="print_properties", default=False, action='store_true', help='Print chart properties')

    argv = sys.argv[1:]

    COMMANDS = ["info", "run", "imageexport", "dataexport", "templates"]
    if argv and argv[0] not in COMMANDS \
            and not argv[0].startswith("-") and argv[0].endswith(".anf"):
        argv = ["info"] + argv

    args = parser.parse_args(argv)

    if not args.command:
        parser.print_help()
        exit(0)

    if args.command not in COMMANDS:
        parser.print_help()
        error("Unknown command '%s'" % args.command)

    if args.command == 'templates':
        dirs = [os.path.abspath(dir) for dir in args.templates_path.split(":")] if args.templates_path else []
        if args.verbose:
            print("Loading from: " + ":".join(dirs + get_chart_template_locations()) + "\n")
        templates = load_chart_templates(dirs)
        for id in sorted(templates.keys()):
            template = templates[id]
            print('{}: "{}" ({})'.format(id, template.name, template.type))
            if args.print_properties:
                for key in sorted(template.properties.keys(), key=str.casefold):
                    value = template.properties[key]
                    print('    {} = {}'.format(key, repr(value)))
        exit(0)

    anf_file = args.anf_file[0]
    anf_dir = os.path.dirname(os.path.abspath(anf_file))

    analysis = load_anf_file(anf_file)

    if False: # debug output
        import json
        print(json.dumps(analysis, default=lambda obj: vars(obj), indent=4, separators=(',', ': ')))

    project_paths = dict([tuple(p.split('=', 1)) for p in args.p]) if args.p else dict()

    workspace_dir = args.w[0]
    if not workspace_dir:
        anf_dir = os.path.dirname(os.path.abspath(anf_file))
        workspace_dir = Workspace.find_workspace(anf_dir)
    workspace = Workspace(workspace_dir, project_paths)

    selected_charts = None

    if args.i and args.n:
        error("Do not use -i and -n together.")

    def expand_ranges(s):
        if not re.match(r'^(((\d+)-(\d+)|(\d+)|),)+$', s+","):
            error("Invalid syntax '{}' in argument for -i <indices>".format(s))
        # "1-6,99" -> "1,2,3,4,5,6,99"
        s = re.sub('(\d+)-(\d+)', lambda m: str(list(range(int(m.group(1)),1+int(m.group(2)))))[1:-1], s)
        # "1,2,3,4,5,6,99" -> [1,2,3,4,5,6,99]
        numbers = [ int(i) for i in s.split(',') ]
        return np.unique(np.array(numbers))

    all_charts = analysis.collect_charts()
    if args.i:
        try:
            indices = expand_ranges(args.i[0])
            selected_charts = [all_charts[index] for index in indices]
        except IndexError:
            error('Chart index out of range 0..{}'.format(len(all_charts)-1))
    elif args.n:
        selected_charts = [ c for c in all_charts if args.n[0] in analysis.get_item_path_as_string(c) ]
        if not selected_charts:
            error('String "{}" does not occur in any chart\'s name or path'.format(args.n[0]))
    else: # neither -i nor -n given
        selected_charts = all_charts

    props = dict([i.split("=", 1) for i in args.properties])

    if args.command == 'info':
        print(anf_file + ":\n")
        print("{} inputs:\n".format(len(analysis.inputs)))
        for i, inp in enumerate(analysis.inputs):
            print('\t"{}"'.format(inp))
        print()
        if selected_charts == all_charts:
            print('{} charts:\n'.format(len(all_charts)))
        else:
            print('{} of {} charts selected:\n'.format(len(selected_charts), len(all_charts)))
        for i, chart in enumerate(all_charts):
            if chart in selected_charts:
                print('\t{}.\t{}\t"{}"'.format(i, chart.type, analysis.get_item_path_as_string(chart)))
    else:
        error_list = []
        for chart in selected_charts:
            try:
                if args.command == 'run':
                    print("Running " + chart.name + "...")
                    analysis.run_chart(chart, anf_dir, workspace, show=args.show, extra_props=props)
                elif args.command == 'imageexport':
                    print("Exporting " + chart.name + "...")
                    analysis.export_image(chart, anf_dir, workspace, enforce=False,
                                          format=args.format, target_folder=args.target_folder, filename=args.out_file,
                                          width=args.width, height=args.height, dpi=args.dpi,
                                          extra_props=props) is not None
                elif args.command == 'dataexport':
                    print("Exporting " + chart.name + "...")
                    analysis.export_data(chart, anf_dir, workspace, enforce=False,
                                         format=args.format, target_folder=args.target_folder, filename=args.out_file,
                                         extra_props=props) is not None
            except Exception as e:
                print("\nError in chart " + chart.name + ": " + str(e), file = sys.stderr)
                print(traceback.format_exc(), file = sys.stderr)
                error_list.append(chart.name)
        if error_list:
            print("Failed charts: " + ", ".join(error_list), file = sys.stderr)
            sys.exit(1)
